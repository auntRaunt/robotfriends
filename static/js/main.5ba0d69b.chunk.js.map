{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","console","log","map","item","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","React","Component","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ba0d69b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log('CardList')\r\n  return (\r\n    <div>\r\n      {robots.map((item) => {\r\n        return (\r\n          <Card\r\n            key={item.id}\r\n            id={item.id}\r\n            name={item.name}\r\n            email={item.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  console.log(\"SearchBox\")\r\n  return (\r\n    <>\r\n      <div className=\"pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          onChange={searchChange}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"500px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass CounterButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    //return true -> update the component\r\n    //return false -> will not update the component\r\n    console.log(this.state.count, nextState);\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  updateCount = () => {\r\n    this.setState((state) => ({ count: state.count + 1 }));\r\n  };\r\n\r\n  render() {\r\n    console.log(\"CounterButton\");\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\nclass Header extends React.Component {\r\n//   shouldComponentUpdate(nextProps, nextState) {\r\n//     //return true -> update the component\r\n//     //return false -> will not update the component\r\n//     return false;\r\n//   }\r\n  render() {\r\n    console.log(\"Header\");\r\n    return (\r\n      <div>\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <CounterButton color={`red`} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll.js\";\r\nimport Header from '../components/Header';\r\nimport \"./App.css\";\r\n// import ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\n//Class Component\r\nclass App extends React.Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     robots: [],\r\n  //     // searchfield: \"\",\r\n  //   };\r\n  // }\r\n\r\n  componentDidMount() {\r\n    // console.log(this.props.store.getState());\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then((response) => response.json())\r\n    //   .then((users) => {\r\n    //     this.setState({ robots: users });\r\n    //   });\r\n\r\n    //use redux\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchfield: event.target.value });\r\n  // };\r\n\r\n  render() {\r\n    // const { robots } = this.state;\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n} \r\n\r\n//connect(mapStateToProps, mapDispatchToProps)\r\n// = subscribe any changes to Redux Store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n//Functional Component\r\n// export default function App() {\r\n//   // constructor() {\r\n//   //   super();\r\n//   //   this.state = {\r\n//   //     robots: [],\r\n//   //     searchField: \"\",\r\n//   //   };\r\n//   // }\r\n\r\n//   // componentDidMount() {\r\n//   //   fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n//   //     .then((response) => response.json())\r\n//   //     .then((users) => this.setState({ robots: users }));\r\n//   //   // this.setState({ robots: robots });\r\n//   // }\r\n//   const [robots, setRobots] = useState([]);\r\n//   const [searchField, setSearchField] = useState(\"\");\r\n\r\n//   const onSearchChange = (event) => {\r\n//     // this.setState({ searchField: event.target.value });\r\n//     setSearchField(event.target.value);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n//       .then((response) => response.json())\r\n//       .then((users) => setRobots(users));\r\n//   }, []);\r\n\r\n//   // const { robots, searchField } = this.state;\r\n//   const filterdRobots = robots.filter((robot) => {\r\n//     return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"tc\">\r\n//       <h1 className=\"f2\">RoboFriends</h1>\r\n//       <SearchBox searchChange={onSearchChange} />\r\n//       <Scroll>\r\n//         <ErrorBoundry>\r\n//           <CardList robots={filterdRobots} />;\r\n//         </ErrorBoundry>\r\n//       </Scroll>\r\n//     </div>\r\n//   );\r\n// }\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n//for getting api, action need to return function\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n\r\n//action function return an object has a type and payload property\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  // console.log(action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      //create a new object state (can not modify current object)\r\n      //   return Object.assign({}, state, { searchField: action.payload });\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n//Create Redux store\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}